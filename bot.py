import os
import logging
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from transformers import pipeline, AutoTokenizer, AutoModelForSequenceClassification
from models import init_db, get_session, Employee, Event, Task, TaskStatus
from sqlalchemy import or_, and_
import re
from typing import List, Dict, Tuple, Optional

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Initialize the AI models with better configuration
classifier = pipeline(
    "zero-shot-classification",
    model="facebook/bart-large-mnli",
    device=0 if os.environ.get("CUDA_VISIBLE_DEVICES") else -1
)

# Define categories for classification with examples and synonyms
categories = [
    "–ø–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞",
    "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏",
    "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞—á–µ",
    "–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ",
    "–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å"
]

# Define example queries and synonyms for each category with improved patterns
category_patterns = {
    "–ø–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞": {
        "keywords": [
            '–æ—Ç–¥–µ–ª', '–æ—Ç–¥–µ–ª–µ', 'it', 'hr', 'sales', 'marketing', '–ø—Ä–æ–µ–∫—Ç', 'project',
            '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', '—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫', '–º–µ–Ω–µ–¥–∂–µ—Ä', '–¥–∏—Ä–µ–∫—Ç–æ—Ä', '—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å',
            '—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç', '–∏–Ω–∂–µ–Ω–µ—Ä', '–∞–Ω–∞–ª–∏—Ç–∏–∫', '–¥–∏–∑–∞–π–Ω–µ—Ä', '—Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫'
        ],
        "synonyms": [
            '–Ω–∞–π—Ç–∏', '–ø–æ–∫–∞–∑–∞—Ç—å', '–∫—Ç–æ', '–∫–∞–∫–∏–µ', '—Å–ø–∏—Å–æ–∫', '—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏', '—Ä–∞–±–æ—Ç–Ω–∏–∫–∏',
            '–∫–æ–ª–ª–µ–≥–∏', '–ª—é–¥–∏', '–∫–æ–º–∞–Ω–¥–∞', '–≥—Ä—É–ø–ø–∞', '–æ—Ç–¥–µ–ª', '–ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ',
            '–∏—Å–∫–∞—Ç—å', '–ø–æ–∏—Å–∫', '–Ω–∞–π—Ç–∏', '–ø–æ–∫–∞–∑–∞—Ç—å', '–≤—ã–≤–µ—Å—Ç–∏', '–æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å'
        ],
        "examples": [
            "–∫—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –æ—Ç–¥–µ–ª–µ",
            "–Ω–∞–π—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞",
            "–∫—Ç–æ –∏–∑ –æ—Ç–¥–µ–ª–∞",
            "–ø–æ–∫–∞–∂–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤",
            "–∫—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–æ–º",
            "—Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤",
            "–∫–∞–∫–∏–µ –ª—é–¥–∏ —Ä–∞–±–æ—Ç–∞—é—Ç",
            "–∫—Ç–æ –≤ –∫–æ–º–∞–Ω–¥–µ",
            "–ø–æ–∫–∞–∂–∏ –∫–æ–º–∞–Ω–¥—É —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏",
            "–∫—Ç–æ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø—Ä–æ–µ–∫—Ç",
            "–Ω–∞–π—Ç–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –ø–æ",
            "–∫—Ç–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç –æ—Ç–¥–µ–ª–æ–º"
        ]
    },
    "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏": {
        "keywords": [
            '–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ', '–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', '–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤', '—Ç—Ä–µ–Ω–∏–Ω–≥', '–≤—Å—Ç—Ä–µ—á–∞',
            '–Ω–µ–¥–µ–ª–µ', '–Ω–µ–¥–µ–ª–∏', '–º–µ—Å—è—Ü', '–º–µ—Å—è—Ü–∞', '–¥–µ–Ω—å', '–¥–Ω—è', '–¥–∞—Ç–∞',
            '–≤—Ä–µ–º—è', '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', '–ø–ª–∞–Ω', '–∫–∞–ª–µ–Ω–¥–∞—Ä—å', '—Å–æ–±—ã—Ç–∏–µ', '—Å–æ–±—ã—Ç–∏—è'
        ],
        "synonyms": [
            '–∫–æ–≥–¥–∞', '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', '–ø–ª–∞–Ω', '–∫–∞–ª–µ–Ω–¥–∞—Ä—å', '–¥–∞—Ç–∞', '–≤—Ä–µ–º—è',
            '–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ', '–Ω–∞–∑–Ω–∞—á–µ–Ω–æ', '–±—É–¥–µ—Ç', '–ø—Ä–æ–π–¥–µ—Ç', '—Å–æ—Å—Ç–æ–∏—Ç—Å—è',
            '–æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–æ', '–ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ', '—É—Å—Ç—Ä–æ–µ–Ω–æ'
        ],
        "examples": [
            "–∫–∞–∫–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è",
            "–∫–æ–≥–¥–∞ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤",
            "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π",
            "–∫–∞–∫–∏–µ –≤—Å—Ç—Ä–µ—á–∏",
            "–∫–æ–≥–¥–∞ —Ç—Ä–µ–Ω–∏–Ω–≥",
            "—á—Ç–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ",
            "–∫–∞–∫–∏–µ —Å–æ–±—ã—Ç–∏—è",
            "—á—Ç–æ –±—É–¥–µ—Ç –Ω–∞ –Ω–µ–¥–µ–ª–µ",
            "–∫–∞–∫–∏–µ –≤—Å—Ç—Ä–µ—á–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã",
            "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –º–µ—Å—è—Ü",
            "–∫–æ–≥–¥–∞ —Å–ª–µ–¥—É—é—â–µ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ",
            "—á—Ç–æ –≥–æ—Ç–æ–≤–∏—Ç—Å—è –≤ –æ—Ç–¥–µ–ª–µ"
        ]
    },
    "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞—á–µ": {
        "keywords": [
            '–∑–∞–¥–∞—á–∞', '–∑–∞–¥–∞—á–∏', '–¥–µ–¥–ª–∞–π–Ω', '–ø—Ä–æ–µ–∫—Ç', '—Ä–∞–±–æ—Ç–∞', '–ø–æ—Ä—É—á–µ–Ω–∏–µ',
            '–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å', '—Ñ—É–Ω–∫—Ü–∏—è', '—Ä–æ–ª—å', '–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å', '–∫–æ–Ω—Ç—Ä–æ–ª—å',
            '–ø—Ä–æ–≤–µ—Ä–∫–∞', '—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', '–≤–Ω–µ–¥—Ä–µ–Ω–∏–µ'
        ],
        "synonyms": [
            '—Å–¥–µ–ª–∞—Ç—å', '–≤—ã–ø–æ–ª–Ω–∏—Ç—å', '—Å—Ä–æ–∫', '—Å—Ç–∞—Ç—É—Å', '–ø—Ä–æ–≥—Ä–µ—Å—Å', '—Ö–æ–¥',
            '–ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ', '—ç—Ç–∞–ø', '—Å—Ç–∞–¥–∏—è', '—Ñ–∞–∑–∞', '–ø—Ä–æ—Ü–µ—Å—Å', '—Ä–∞–±–æ—Ç–∞',
            '–¥–µ–ª–æ', '–ø–æ—Ä—É—á–µ–Ω–∏–µ', '–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å'
        ],
        "examples": [
            "–∫–∞–∫–∏–µ –∑–∞–¥–∞—á–∏",
            "—á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å",
            "–∫–∞–∫–∏–µ –¥–µ–¥–ª–∞–π–Ω—ã",
            "—Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏",
            "–∫–æ–≥–¥–∞ —Å–¥–∞—Ç—å",
            "—á—Ç–æ –≤ —Ä–∞–±–æ—Ç–µ",
            "—Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏",
            "–º–æ–∏ –ø–æ—Ä—É—á–µ–Ω–∏—è",
            "—á—Ç–æ –Ω–∞ –∫–æ–Ω—Ç—Ä–æ–ª–µ",
            "–∫–∞–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã –≤ —Ä–∞–±–æ—Ç–µ",
            "—Å—Ç–∞—Ç—É—Å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏",
            "—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"
        ]
    },
    "–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ": {
        "keywords": [
            '–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', '–¥–æ–±—Ä—ã–π', '–Ω–∞—á–∞—Ç—å', '–ø–æ–º–æ—â—å', '—Ö–µ–ª–ª–æ—É',
            '—Ö–∞–π', '–∑–¥–æ—Ä–æ–≤–æ', '–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é', '–¥–æ–±—Ä–æ–µ', '–¥–æ–±—Ä—ã–π'
        ],
        "synonyms": [
            '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ', '–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ', '–¥–æ–±—Ä—ã–π –¥–µ–Ω—å', '–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä',
            '—Ö–µ–ª–ª–æ—É', '—Ö–∞–π', '–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é', '–∑–¥–æ—Ä–æ–≤–æ', '–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å',
            '—Ä–∞–¥ –≤–∏–¥–µ—Ç—å', '–∫–∞–∫ –¥–µ–ª–∞', '–∫–∞–∫ –∂–∏–∑–Ω—å'
        ],
        "examples": [
            "–ø—Ä–∏–≤–µ—Ç",
            "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π",
            "–¥–æ–±—Ä—ã–π –¥–µ–Ω—å",
            "–Ω–∞—á–∞—Ç—å",
            "–ø–æ–º–æ—â—å",
            "–∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è",
            "—á—Ç–æ —É–º–µ–µ—à—å",
            "–∫–∞–∫ –¥–µ–ª–∞",
            "–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ",
            "–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä",
            "—Ä–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å",
            "–∫–∞–∫ –∂–∏–∑–Ω—å"
        ]
    }
}

def preprocess_query(query: str) -> str:
    """Preprocess the query for better classification."""
    # Convert to lowercase
    query = query.lower()
    
    # Remove punctuation but keep important symbols
    query = re.sub(r'[^\w\s\-]', ' ', query)
    
    # Remove extra spaces
    query = ' '.join(query.split())
    
    # Remove common stop words
    stop_words = {'–∏', '–≤', '–Ω–∞', '—Å', '–ø–æ', '–¥–ª—è', '–Ω–µ', '–Ω–∏', '–Ω–æ', '–∞', '–∏–ª–∏', '—á—Ç–æ', '–∫–∞–∫'}
    words = query.split()
    query = ' '.join(word for word in words if word not in stop_words)
    
    return query

def calculate_category_score(query: str, category: str) -> float:
    """Calculate a score for how well the query matches a category."""
    score = 0.0
    patterns = category_patterns[category]
    
    # Check keywords with higher weight for exact matches
    for keyword in patterns["keywords"]:
        if keyword in query:
            score += 0.4
        elif any(word.startswith(keyword) or keyword.startswith(word) for word in query.split()):
            score += 0.2
    
    # Check synonyms
    for synonym in patterns["synonyms"]:
        if synonym in query:
            score += 0.3
        elif any(word.startswith(synonym) or synonym.startswith(word) for word in query.split()):
            score += 0.15
    
    # Check examples with highest weight
    for example in patterns["examples"]:
        if example in query:
            score += 0.6
        elif any(word in example for word in query.split()):
            score += 0.3
    
    return score

def classify_query(query: str) -> Tuple[str, float]:
    """Classify the user query into one of the predefined categories with confidence score."""
    query = preprocess_query(query)
    logger.info(f"Processing query: {query}")
    
    # Calculate scores for each category
    category_scores = {
        category: calculate_category_score(query, category)
        for category in categories if category != "–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å"
    }
    
    # Get the category with the highest score
    max_score_category = max(category_scores.items(), key=lambda x: x[1])
    
    # If the highest score is too low, use the AI model
    if max_score_category[1] < 0.3:
        logger.info("Using AI model for classification")
        result = classifier(query, categories)
        max_score_index = result['scores'].index(max(result['scores']))
        category = result['labels'][max_score_index]
        confidence = result['scores'][max_score_index]
        logger.info(f"AI model classified as: {category} with confidence {confidence:.2f}")
    else:
        category = max_score_category[0]
        confidence = max_score_category[1]
        logger.info(f"Rule-based classification: {category} with confidence {confidence:.2f}")
    
    # If confidence is too low, return "–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å"
    if confidence < 0.2:
        return "–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å", confidence
    
    return category, confidence

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Send a message when the command /start is issued."""
    welcome_message = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –±–æ—Ç!\n\n"
        "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å:\n"
        "üîç –ü–æ–∏—Å–∫–æ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤\n"
        "üìÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö\n"
        "‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–¥–∞—á–∞—Ö\n\n"
        "–ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ!"
    )
    await update.message.reply_text(welcome_message)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Send a message when the command /help is issued."""
    help_text = (
        "ü§ñ –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:\n\n"
        "1. –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
        "   - '–ö—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ IT –æ—Ç–¥–µ–ª–µ?'\n"
        "   - '–ö–∞–∫–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ?'\n"
        "   - '–ö–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ —É –ò–≤–∞–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞?'\n\n"
        "2. –Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.\n\n"
        "3. –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã:\n"
        "   /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "   /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )
    await update.message.reply_text(help_text)

def search_employees(query: str) -> str:
    """Search for employees based on the query."""
    session = get_session()
    query_lower = query.lower()
    logger.info(f"Searching employees with query: {query_lower}")
    
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ (—Ä—É—Å—Å–∫–∏–µ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ)
        role_keywords = {
            '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞': [
                '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', '—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç', '–∫–æ–¥', '–∫–æ–¥–∏—Ç—å',
                'developer', 'programmer', 'coder', 'software', 'engineer'
            ],
            '—Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ': [
                '—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å', '–¥–∏—Ä–µ–∫—Ç–æ—Ä', '–º–µ–Ω–µ–¥–∂–µ—Ä', '–≥–ª–∞–≤–∞', '–Ω–∞—á–∞–ª—å–Ω–∏–∫',
                'manager', 'director', 'head', 'lead', 'chief', 'senior'
            ],
            '—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ': [
                '—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', '—Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫', 'qa', '–∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞',
                'tester', 'qa engineer', 'quality', 'testing'
            ],
            '–¥–∏–∑–∞–π–Ω': [
                '–¥–∏–∑–∞–π–Ω', '–¥–∏–∑–∞–π–Ω–µ—Ä', 'ui', 'ux', '–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å',
                'designer', 'ui/ux', 'interface', 'frontend'
            ],
            '–∞–Ω–∞–ª–∏—Ç–∏–∫–∞': [
                '–∞–Ω–∞–ª–∏—Ç–∏–∫', '–∞–Ω–∞–ª–∏–∑', '–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ', '–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å',
                'analyst', 'researcher', 'research', 'analysis'
            ]
        }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–¥–µ–ª—ã (—Ä—É—Å—Å–∫–∏–µ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è)
        departments = {
            'it': ['it', '–∞–π—Ç–∏', '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', 'development'],
            'hr': ['hr', '—ç–π—á–∞—Ä', '–∫–∞–¥—Ä—ã', '–ø–µ—Ä—Å–æ–Ω–∞–ª', 'human resources'],
            'sales': ['sales', '–ø—Ä–æ–¥–∞–∂–∏', '—Å–µ–π–ª–∑', '–∫–æ–º–º–µ—Ä—Ü–∏—è'],
            'marketing': ['marketing', '–º–∞—Ä–∫–µ—Ç–∏–Ω–≥', '—Ä–µ–∫–ª–∞–º–∞', '–ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ']
        }
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã
        search_terms = []
        search_roles = []
        search_departments = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª–∏
        for role, keywords in role_keywords.items():
            if any(keyword in query_lower for keyword in keywords):
                search_roles.append(role)
                logger.info(f"Found role: {role}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–¥–µ–ª—ã
        for dept, keywords in departments.items():
            if any(keyword in query_lower for keyword in keywords):
                search_departments.append(dept)
                logger.info(f"Found department: {dept}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        query_filters = []
        
        # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã —Ä–æ–ª–∏
        if search_roles:
            role_conditions = []
            for role in search_roles:
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∏—Å–∫ –ø–æ —Ä—É—Å—Å–∫–∏–º –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–º —Ç–µ—Ä–º–∏–Ω–∞–º
                role_keywords_list = role_keywords[role]
                role_conditions.append(or_(
                    *[Employee.position.ilike(f'%{keyword}%') for keyword in role_keywords_list]
                ))
            query_filters.append(or_(*role_conditions))
        
        # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –æ—Ç–¥–µ–ª—ã
        if search_departments:
            dept_conditions = []
            for dept in search_departments:
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∏—Å–∫ –ø–æ —Ä—É—Å—Å–∫–∏–º –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏—è–º
                dept_keywords_list = departments[dept]
                dept_conditions.append(or_(
                    *[Employee.department.ilike(f'%{keyword}%') for keyword in dept_keywords_list]
                ))
            query_filters.append(or_(*dept_conditions))
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤, –∏—â–µ–º –ø–æ –≤—Å–µ–º—É —Ç–µ–∫—Å—Ç—É
        if not query_filters:
            query_filters.append(or_(
                Employee.name.ilike(f'%{query}%'),
                Employee.position.ilike(f'%{query}%'),
                Employee.department.ilike(f'%{query}%')
            ))
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
        employees = session.query(Employee).filter(and_(*query_filters)).all()
        
        if employees:
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ –æ—Ç–¥–µ–ª–∞–º
            dept_employees = {}
            for emp in employees:
                if emp.department not in dept_employees:
                    dept_employees[emp.department] = []
                dept_employees[emp.department].append(emp)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response = "–ù–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏:\n\n"
            for dept, emps in dept_employees.items():
                response += f"üìå {dept}:\n"
                for emp in emps:
                    response += f"‚Ä¢ {emp.name} - {emp.position}\n"
                response += "\n"
            return response
        
        return "–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞."
    finally:
        session.close()

def search_events(query: str) -> str:
    """Search for events based on the query."""
    session = get_session()
    query_lower = query.lower()
    logger.info(f"Searching events with query: {query_lower}")
    
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–∏–æ–¥
        today = datetime.now().date()
        week_start = today - timedelta(days=today.weekday())
        week_end = week_start + timedelta(days=6)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ–¥–µ–ª–∏
        if '–Ω–µ–¥–µ–ª–µ' in query_lower or '–Ω–µ–¥–µ–ª–∏' in query_lower:
            events = session.query(Event).filter(
                Event.date >= week_start,
                Event.date <= week_end
            ).all()
        else:
            # –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ —Ç–∏–ø—É
            events = session.query(Event).filter(
                or_(
                    Event.name.ilike(f'%{query}%'),
                    Event.type.ilike(f'%{query}%')
                )
            ).all()
        
        if events:
            return "–ù–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:\n" + "\n".join(
                f"‚Ä¢ {event.name} ({event.date}) - {event.description}"
                for event in sorted(events, key=lambda x: x.date)
            )
        return "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
    finally:
        session.close()

def search_tasks(query: str) -> str:
    """Search for tasks based on the query."""
    session = get_session()
    query_lower = query.lower()
    logger.info(f"Searching tasks with query: {query_lower}")
    
    try:
        # Search by title or assignee
        tasks = session.query(Task).join(Employee).filter(
            or_(
                Task.title.ilike(f'%{query}%'),
                Employee.name.ilike(f'%{query}%')
            )
        ).all()
        
        if tasks:
            return "–ù–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–¥–∞—á–∏:\n" + "\n".join(
                f"‚Ä¢ {task.title} (–°—Ä–æ–∫: {task.deadline}, –°—Ç–∞—Ç—É—Å: {task.status.value}, –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {task.assignee.name})"
                for task in tasks
            )
        return "–ó–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
    finally:
        session.close()

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle user messages and respond accordingly."""
    query = update.message.text
    logger.info(f"Received message: {query}")
    
    category, confidence = classify_query(query)
    logger.info(f"Classified as: {category} with confidence {confidence:.2f}")
    
    if category == "–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å":
        response = (
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª –≤–∞—à –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫.\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:\n"
            "‚Ä¢ –ö—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ IT –æ—Ç–¥–µ–ª–µ?\n"
            "‚Ä¢ –ö–∞–∫–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ?\n"
            "‚Ä¢ –ö–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ —É –ò–≤–∞–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞?"
        )
    elif category == "–ø–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞":
        response = search_employees(query)
    elif category == "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏":
        response = search_events(query)
    elif category == "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞—á–µ":
        response = search_tasks(query)
    else:
        response = "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª –≤–∞—à –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫."
    
    logger.info(f"Sending response: {response}")
    await update.message.reply_text(response)

def main():
    """Start the bot."""
    # Initialize database
    init_db()
    
    # Create the Application
    application = Application.builder().token("8181926764:AAE0RsZomH3bdhLnGqatSi5W7HH3fwjiEQQ").build()

    # Add handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # Start the Bot
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main() 
