import os
import logging
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler, ConversationHandler
from sentence_transformers import SentenceTransformer
from models import (
    get_session, Employee, Event, Task, TaskStatus, 
    Activity, activity_participants, EventType, ActivityType, 
    Session, Base, engine, GeneralInfo
)
from models import init_db  # Explicitly import init_db
from sqlalchemy import or_, and_, extract
import re
from typing import List, Dict, Tuple, Optional, Union
import json
import requests
from dotenv import load_dotenv
import torch
import difflib
import nltk
from nltk.tokenize import word_tokenize
from nltk.corpus import stopwords
from nltk.stem import SnowballStemmer
from collections import defaultdict
from functools import lru_cache
from Levenshtein import distance as levenshtein_distance
import traceback
from dateutil import parser
import pytz
from config import (
    TELEGRAM_TOKEN, DATABASE_URL, MODEL_NAME, DEBUG, TIMEZONE,
    DEFAULT_LANGUAGE, ADMIN_USER_IDS, WELCOME_MESSAGE, HELP_MESSAGE,
    ERROR_MESSAGES, SEARCH_SETTINGS, ACTIVITY_SETTINGS, TASK_SETTINGS,
    EVENT_SETTINGS
)

# Download all required NLTK data
required_nltk_data = ['punkt', 'stopwords', 'punkt_tab']
for item in required_nltk_data:
    try:
        nltk.data.find(f'tokenizers/{item}')
    except LookupError:
        nltk.download(item, quiet=True)

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.DEBUG if DEBUG else logging.INFO
)
logger = logging.getLogger(__name__)

# States for conversation handler
CHOOSING, TYPING_REPLY = range(2)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞
try:
    model = SentenceTransformer(MODEL_NAME)
    logger.info(f"Successfully loaded model: {MODEL_NAME}")
except Exception as e:
    logger.error(f"Error initializing sentence transformer: {e}")
    model = None

# Define categories for classification
categories = [
    "–ø–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞",
    "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏",
    "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞—á–µ",
    "—Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
    "–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ",
    "–æ–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
    "–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è",
    "–∫–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–æ—Å—Ç–∏",
    "–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è",
    "–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å"
]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        await update.message.reply_text(WELCOME_MESSAGE)
    except Exception as e:
        logger.error(f"Error in start command: {e}")
        await update.message.reply_text(ERROR_MESSAGES['general'])

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –≤–æ–ø—Ä–æ—Å–æ–≤"""
    help_text = """ü§ñ –Ø –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å –≤–∞–º –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏ –∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö.

üìã –í–æ—Ç –ø—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å:

üë• –û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö:
‚Ä¢ –ö—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ IT –æ—Ç–¥–µ–ª–µ?
‚Ä¢ –ù–∞–π–¥–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ –∏–º–µ–Ω–∏ –ò–≤–∞–Ω
‚Ä¢ –ö–∞–∫–∏–µ –Ω–∞–≤—ã–∫–∏ —É –ú–∞—Ä–∏–∏?
‚Ä¢ –ö—Ç–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ Python?

üìÖ –û –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö:
‚Ä¢ –ö–∞–∫–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ?
‚Ä¢ –ö–æ–≥–¥–∞ —Å–ª–µ–¥—É—é—â–∞—è –≤—Å—Ç—Ä–µ—á–∞ –∫–æ–º–∞–Ω–¥—ã?
‚Ä¢ –ì–¥–µ –±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ç—Ä–µ–Ω–∏–Ω–≥?
‚Ä¢ –ö—Ç–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è?

‚úÖ –û –∑–∞–¥–∞—á–∞—Ö:
‚Ä¢ –ö–∞–∫–∏–µ —É –º–µ–Ω—è –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏?
‚Ä¢ –ö–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –Ω–∞ –ò–≤–∞–Ω–∞?
‚Ä¢ –ö–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º?
‚Ä¢ –ö–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–æ –∫–æ–Ω—Ü–∞ –Ω–µ–¥–µ–ª–∏?

üéØ –û —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è—Ö:
‚Ä¢ –ö–∞–∫–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã?
‚Ä¢ –ö–æ–≥–¥–∞ —Ç—É—Ä–Ω–∏—Ä –ø–æ –Ω–∞—Å—Ç–æ–ª—å–Ω–æ–º—É —Ç–µ–Ω–Ω–∏—Å—É?
‚Ä¢ –ö—Ç–æ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è—Ö?
‚Ä¢ –ö–∞–∫–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —Å–ø–æ—Ä—Ç–∑–∞–ª–µ?

üéÇ –û –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è:
‚Ä¢ –£ –∫–æ–≥–æ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ?
‚Ä¢ –ö–æ–≥–¥–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É –ú–∞—Ä–∏–∏?
‚Ä¢ –ö—Ç–æ —Ä–æ–¥–∏–ª—Å—è –≤ –º–∞–µ?

üìä –û –∑–∞–Ω—è—Ç–æ—Å—Ç–∏:
‚Ä¢ –ö—Ç–æ —Å–≤–æ–±–æ–¥–µ–Ω –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ?
‚Ä¢ –ö–æ–≥–¥–∞ –ò–≤–∞–Ω –∑–∞–Ω—è—Ç?
‚Ä¢ –ö–∞–∫–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å –≤ IT –æ—Ç–¥–µ–ª–µ?

üí° –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
‚Ä¢ –ö–∞–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞ —Ä–∞–±–æ—Ç—ã –≤ –∫–æ–º–ø–∞–Ω–∏–∏?
‚Ä¢ –ì–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –æ—Ñ–∏—Å?
‚Ä¢ –ö–∞–∫ —Å–≤—è–∑–∞—Ç—å—Å—è —Å HR?

üîç –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!

‚ùì –ï—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Å–ø—Ä–æ—Å–∏—Ç—å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    
    try:
        await update.message.reply_text(help_text)
    except Exception as e:
        logger.error(f"Error in help command: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ø—Ä–∞–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def classify_query(query: str) -> Tuple[str, float]:
    """–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
    try:
        if model is None:
            logger.error("Model is not initialized")
            return "–ø–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", 0.5  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        
        # –ü–æ–ª—É—á–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –∑–∞–ø—Ä–æ—Å–∞
        query_embedding = model.encode(query)
        logger.debug(f"Query embedding shape: {query_embedding.shape}")
        
        # –ü–æ–ª—É—á–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        category_embeddings = model.encode(categories)
        logger.debug(f"Category embeddings shape: {category_embeddings.shape}")
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ç–µ–Ω–∑–æ—Ä—ã PyTorch
        query_tensor = torch.tensor(query_embedding).unsqueeze(0)  # [1, dim]
        category_tensor = torch.tensor(category_embeddings)  # [num_categories, dim]
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ö–æ–∂–µ—Å—Ç—å
        similarities = torch.nn.functional.cosine_similarity(
            query_tensor,
            category_tensor,
            dim=1
        )
        logger.debug(f"Similarities shape: {similarities.shape}")
        logger.debug(f"Similarities: {similarities}")
        
        # –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        max_similarity, max_idx = torch.max(similarities, dim=0)
        max_idx = max_idx.item()  # Convert tensor to int
        logger.debug(f"Max similarity: {max_similarity.item()}, Max index: {max_idx}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω–¥–µ–∫—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        if 0 <= max_idx < len(categories):
            category = categories[max_idx]
            confidence = max_similarity.item()
            logger.info(f"Classified query '{query}' as '{category}' with confidence {confidence:.2f}")
            return category, confidence
        else:
            logger.warning(f"Invalid category index {max_idx} for query: {query}")
            return "–ø–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", 0.5  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        
    except Exception as e:
        logger.error(f"Error in classify_query: {str(e)}")
        logger.error(f"Traceback: {traceback.format_exc()}")
        return "–ø–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", 0.5  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∑–∞–ø—Ä–æ—Å–æ–≤"""
    try:
        query = update.message.text.lower()
        logger.info(f"Received query: {query}")
        
        # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        category, confidence = classify_query(query)
        logger.info(f"Query classified as: {category} with confidence: {confidence}")
        
        session = get_session()
        try:
            response = ""
            
            if category == "–ø–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞":
                logger.info("Searching for employees")
                response = search_employees(query)
            elif category == "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏":
                logger.info("Searching for events")
                response = search_events(query, session)
            elif category == "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞—á–µ":
                logger.info("Searching for tasks")
                response = search_tasks(session, query)
            elif category == "—Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏":
                logger.info("Searching for activities")
                response = search_activities(session, query)
            elif category == "–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è":
                logger.info("Searching for birthdays")
                response = search_birthdays(query, session)
            elif category == "–∫–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–æ—Å—Ç–∏":
                logger.info("Searching for availability")
                response = search_availability(query, session)
            elif category == "–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ":
                logger.info("Sending welcome message")
                response = WELCOME_MESSAGE
            elif category == "–æ–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
                logger.info("Searching for general info")
                response = search_general_info(session, query)
            else:
                # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞, –ø—Ä–æ–±—É–µ–º –≤—Å–µ –ø–æ–∏—Å–∫–∏
                logger.info("Trying all search methods")
                responses = []
                
                emp_response = search_employees(query)
                if emp_response != ERROR_MESSAGES['not_found']:
                    responses.append(emp_response)
                
                event_response = search_events(query, session)
                if event_response != ERROR_MESSAGES['not_found']:
                    responses.append(event_response)
                
                task_response = search_tasks(session, query)
                if task_response != ERROR_MESSAGES['not_found']:
                    responses.append(task_response)
                
                activity_response = search_activities(session, query)
                if activity_response != ERROR_MESSAGES['not_found']:
                    responses.append(activity_response)
                
                if responses:
                    response = "\n\n".join(responses)
                else:
                    response = "–Ø –Ω–∞—à–µ–ª —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:\n\n" + search_general_info(session, query)
            
            if not response or response == ERROR_MESSAGES['not_found']:
                response = "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ:\n" + \
                          "üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö\n" + \
                          "üìÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö\n" + \
                          "‚úÖ –ó–∞–¥–∞—á–∞—Ö\n" + \
                          "üéØ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—è—Ö\n" + \
                          "üéÇ –î–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è\n" + \
                          "üìä –ó–∞–Ω—è—Ç–æ—Å—Ç–∏\n\n" + \
                          "–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!"
            
            logger.info(f"Generated response: {response[:100]}...")  # Log first 100 chars of response
            await update.message.reply_text(response)
            
        except Exception as e:
            logger.error(f"Error processing query: {str(e)}")
            logger.error(f"Traceback: {traceback.format_exc()}")
            await update.message.reply_text("–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö, –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö, –∑–∞–¥–∞—á–∞—Ö –∏ –º–Ω–æ–≥–æ–º –¥—Ä—É–≥–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ-–¥—Ä—É–≥–æ–º—É!")
        finally:
            session.close()
            
    except Exception as e:
        logger.error(f"Error in handle_message: {str(e)}")
        logger.error(f"Traceback: {traceback.format_exc()}")
        await update.message.reply_text("–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö, –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö, –∑–∞–¥–∞—á–∞—Ö –∏ –º–Ω–æ–≥–æ–º –¥—Ä—É–≥–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ-–¥—Ä—É–≥–æ–º—É!")

def search_employees(query: str) -> str:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
    try:
        session = get_session()
        query_embedding = model.encode(query) if model else None
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        employees = session.query(Employee).filter(Employee.is_active == True).all()
        
        # –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        employee_embeddings = []
        for emp in employees:
            emp_text = f"{emp.name} {emp.position} {emp.department} {emp.skills}"
            emp_embedding = model.encode(emp_text) if model else None
            employee_embeddings.append((emp, emp_embedding))
        
        # –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ—Ö–æ–∂–∏—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        results = []
        for emp, emp_embedding in employee_embeddings:
            if query_embedding is not None and emp_embedding is not None:
                similarity = torch.nn.functional.cosine_similarity(
                    torch.tensor(query_embedding),
                    torch.tensor(emp_embedding),
                    dim=0
                )
                results.append((emp, similarity.item()))
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Å—Ö–æ–∂–µ—Å—Ç–∏
        results.sort(key=lambda x: x[1], reverse=True)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if not results:
            return ERROR_MESSAGES['not_found']
        
        response = "–í–æ—Ç —á—Ç–æ —è –Ω–∞—à–µ–ª:\n\n"
        for emp, similarity in results[:SEARCH_SETTINGS['max_results']]:
            response += format_employee_info(emp)
            response += f"\n–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {similarity:.2f}\n\n"
        
        return response
        
    except Exception as e:
        logger.error(f"Error in search_employees: {e}")
        return ERROR_MESSAGES['general']

def format_employee_info(emp: Employee) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ"""
    return f"""üë§ {emp.name} {emp.surname}
üìã –î–æ–ª–∂–Ω–æ—Å—Ç—å: {emp.position}
üè¢ –û—Ç–¥–µ–ª: {emp.department}
üìß Email: {emp.email}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: {emp.phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}
üí° –ù–∞–≤—ã–∫–∏: {emp.skills or '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}
üéØ –ò–Ω—Ç–µ—Ä–µ—Å—ã: {emp.interests or '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}"""

def search_events(query: str, session) -> str:
    """–ü–æ–∏—Å–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
        now = datetime.now(pytz.timezone(TIMEZONE))
        
        # –ò—â–µ–º –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        events = session.query(Event).filter(
            Event.start_time >= now,
            Event.status == 'active'
        ).order_by(Event.start_time).all()
        
        if not events:
            return "–ù–∞ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ."
        
        response = "–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:\n\n"
        for event in events:
            response += format_event_info(event)
        
        return response
        
    except Exception as e:
        logger.error(f"Error in search_events: {e}")
        return ERROR_MESSAGES['general']

def format_event_info(event: Event) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏"""
    return f"""üìÖ {event.title}
üìù {event.description or '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}
üïí –í—Ä–µ–º—è: {event.start_time.strftime('%d.%m.%Y %H:%M')} - {event.end_time.strftime('%H:%M')}
üìç –ú–µ—Å—Ç–æ: {event.location or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üë• –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: {event.organizer.name} {event.organizer.surname}
üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(event.participants)}/{event.max_participants or '‚àû'}\n\n"""

def search_tasks(session, query: str) -> str:
    """–ü–æ–∏—Å–∫ –∑–∞–¥–∞—á"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
        now = datetime.now(pytz.timezone(TIMEZONE))
        
        # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
        tasks = session.query(Task).filter(
            Task.status != TaskStatus.DONE,
            Task.due_date >= now
        ).order_by(Task.priority.desc(), Task.due_date).all()
        
        if not tasks:
            return "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á."
        
        response = "–í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n\n"
        for task in tasks:
            response += format_task_info(task)
        
        return response
        
    except Exception as e:
        logger.error(f"Error in search_tasks: {e}")
        return ERROR_MESSAGES['general']

def format_task_info(task: Task) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–µ"""
    status_emoji = {
        TaskStatus.TODO: "üìù",
        TaskStatus.IN_PROGRESS: "üîÑ",
        TaskStatus.DONE: "‚úÖ",
        TaskStatus.BLOCKED: "‚õî"
    }
    
    return f"""{status_emoji.get(task.status, "üìã")} {task.title}
üìù {task.description or '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}
üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {task.assignee.name} {task.assignee.surname}
üìÖ –°—Ä–æ–∫: {task.due_date.strftime('%d.%m.%Y') if task.due_date else '–ù–µ —É–∫–∞–∑–∞–Ω'}
‚≠ê –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {'‚≠ê' * task.priority}\n\n"""

def search_activities(session, query: str) -> str:
    """–ü–æ–∏—Å–∫ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
        now = datetime.now(pytz.timezone(TIMEZONE))
        
        # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        activities = session.query(Activity).filter(
            Activity.start_time >= now,
            Activity.status == 'active'
        ).order_by(Activity.start_time).all()
        
        if not activities:
            return "–ù–∞ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ."
        
        response = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:\n\n"
        for activity in activities:
            response += format_activity_info(activity)
        
        return response
        
    except Exception as e:
        logger.error(f"Error in search_activities: {e}")
        return ERROR_MESSAGES['general']

def format_activity_info(activity: Activity) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    return f"""üéØ {activity.title}
üìù {activity.description or '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}
üïí –í—Ä–µ–º—è: {activity.start_time.strftime('%d.%m.%Y %H:%M')} - {activity.end_time.strftime('%H:%M')}
üìç –ú–µ—Å—Ç–æ: {activity.location or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üë• –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: {activity.organizer.name} {activity.organizer.surname}
üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {activity.current_participants}/{activity.max_participants or '‚àû'}\n\n"""

def search_birthdays(query: str, session) -> str:
    """–ü–æ–∏—Å–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
        now = datetime.now(pytz.timezone(TIMEZONE))
        
        # –ò—â–µ–º –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â–µ–º –º–µ—Å—è—Ü–µ
        employees = session.query(Employee).filter(
            Employee.is_active == True,
            extract('month', Employee.birthday) == now.month
        ).order_by(extract('day', Employee.birthday)).all()
        
        if not employees:
            return "–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –Ω–µ—Ç –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è."
        
        response = "–î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ:\n\n"
        for emp in employees:
            response += f"""üéÇ {emp.name} {emp.surname}
üìÖ {emp.birthday.strftime('%d.%m.%Y')}
üè¢ –û—Ç–¥–µ–ª: {emp.department}\n\n"""
        
        return response
        
    except Exception as e:
        logger.error(f"Error in search_birthdays: {e}")
        return ERROR_MESSAGES['general']

def search_availability(query: str, session) -> str:
    """–ü–æ–∏—Å–∫ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
        now = datetime.now(pytz.timezone(TIMEZONE))
        
        # –ò—â–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏ –∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        employees = session.query(Employee).filter(Employee.is_active == True).all()
        
        response = "–ó–∞–Ω—è—Ç–æ—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:\n\n"
        for emp in employees:
            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            events = session.query(Event).join(
                Event.participants
            ).filter(
                Employee.id == emp.id,
                Event.start_time >= now,
                Event.end_time <= now + timedelta(days=7)
            ).all()
            
            response += f"""üë§ {emp.name} {emp.surname}
üè¢ –û—Ç–¥–µ–ª: {emp.department}\n"""
            
            if events:
                response += "üìÖ –ó–∞–Ω—è—Ç –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö:\n"
                for event in events:
                    response += f"‚Ä¢ {event.title} ({event.start_time.strftime('%d.%m.%Y %H:%M')})\n"
            else:
                response += "‚úÖ –°–≤–æ–±–æ–¥–µ–Ω –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ\n"
            
            response += "\n"
        
        return response
        
    except Exception as e:
        logger.error(f"Error in search_availability: {e}")
        return ERROR_MESSAGES['general']

def search_general_info(session, query: str) -> str:
    """–ü–æ–∏—Å–∫ –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –∑–∞–ø—Ä–æ—Å–∞
        query_embedding = model.encode(query) if model else None
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        info_items = session.query(GeneralInfo).filter(
            GeneralInfo.is_active == True
        ).all()
        
        # –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        info_embeddings = []
        for item in info_items:
            item_text = f"{item.title} {item.content} {item.category}"
            item_embedding = model.encode(item_text) if model else None
            info_embeddings.append((item, item_embedding))
        
        # –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ—Ö–æ–∂–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        results = []
        for item, item_embedding in info_embeddings:
            if query_embedding is not None and item_embedding is not None:
                similarity = torch.nn.functional.cosine_similarity(
                    torch.tensor(query_embedding),
                    torch.tensor(item_embedding),
                    dim=0
                )
                results.append((item, similarity.item()))
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Å—Ö–æ–∂–µ—Å—Ç–∏
        results.sort(key=lambda x: x[1], reverse=True)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if not results:
            return ERROR_MESSAGES['not_found']
        
        response = "–í–æ—Ç —á—Ç–æ —è –Ω–∞—à–µ–ª:\n\n"
        for item, similarity in results[:SEARCH_SETTINGS['max_results']]:
            response += f"""üìå {item.title}
üìù {item.content}
üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {item.category}
‚≠ê –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {similarity:.2f}\n\n"""
        
        return response
        
    except Exception as e:
        logger.error(f"Error in search_general_info: {e}")
        return ERROR_MESSAGES['general']

def init_test_data():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        session = get_session()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ
        if session.query(Employee).first() is not None:
            logger.info("Database already contains data, skipping initialization")
            return
        
        logger.info("Initializing test data...")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        employees = [
            Employee(
                name="–ò–≤–∞–Ω",
                surname="–ò–≤–∞–Ω–æ–≤",
                position="–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
                department="IT",
                email="ivan@company.com",
                phone="+7-999-123-45-67",
                skills="Python, SQL, Docker",
                interests="–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–µ–Ω–∏–µ",
                birthday=datetime(1990, 5, 15),
                is_active=True
            ),
            Employee(
                name="–ú–∞—Ä–∏—è",
                surname="–ü–µ—Ç—Ä–æ–≤–∞",
                position="HR-–º–µ–Ω–µ–¥–∂–µ—Ä",
                department="HR",
                email="maria@company.com",
                phone="+7-999-765-43-21",
                skills="–†–µ–∫—Ä—É—Ç–∏–Ω–≥, –æ–±—É—á–µ–Ω–∏–µ",
                interests="–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è, –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è",
                birthday=datetime(1988, 8, 20),
                is_active=True
            )
        ]
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        events = [
            Event(
                title="–í—Å—Ç—Ä–µ—á–∞ –∫–æ–º–∞–Ω–¥—ã",
                description="–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞ –∫–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏",
                start_time=datetime.now(pytz.timezone(TIMEZONE)) + timedelta(days=1),
                end_time=datetime.now(pytz.timezone(TIMEZONE)) + timedelta(days=1, hours=1),
                location="–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü-–∑–∞–ª",
                event_type=EventType.MEETING,
                organizer=employees[0],
                max_participants=10,
                status='active'
            )
        ]
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
        tasks = [
            Task(
                title="–û–±–Ω–æ–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é",
                description="–û–±–Ω–æ–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –ø–æ API",
                status=TaskStatus.TODO,
                priority=2,
                assignee=employees[0],
                creator=employees[1],
                due_date=datetime.now(pytz.timezone(TIMEZONE)) + timedelta(days=7)
            )
        ]
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        activities = [
            Activity(
                title="–¢—É—Ä–Ω–∏—Ä –ø–æ –Ω–∞—Å—Ç–æ–ª—å–Ω–æ–º—É —Ç–µ–Ω–Ω–∏—Å—É",
                description="–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä –ø–æ –Ω–∞—Å—Ç–æ–ª—å–Ω–æ–º—É —Ç–µ–Ω–Ω–∏—Å—É",
                activity_type=ActivityType.SPORTS,
                start_time=datetime.now(pytz.timezone(TIMEZONE)) + timedelta(days=2),
                end_time=datetime.now(pytz.timezone(TIMEZONE)) + timedelta(days=2, hours=2),
                location="–°–ø–æ—Ä—Ç–∑–∞–ª",
                organizer=employees[1],
                max_participants=8,
                status='active'
            )
        ]
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        general_info = [
            GeneralInfo(
                title="–ü—Ä–∞–≤–∏–ª–∞ —Ä–∞–±–æ—Ç—ã",
                content="–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ —Ä–∞–±–æ—Ç—ã –≤ –∫–æ–º–ø–∞–Ω–∏–∏",
                category="–ü—Ä–∞–≤–∏–ª–∞",
                is_active=True
            )
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        session.add_all(employees)
        session.add_all(events)
        session.add_all(tasks)
        session.add_all(activities)
        session.add_all(general_info)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        session.commit()
        logger.info("Test data initialized successfully")
        
    except Exception as e:
        logger.error(f"Error initializing test data: {str(e)}")
        logger.error(f"Traceback: {traceback.format_exc()}")
        session.rollback()
    finally:
        session.close()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        init_db()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        init_test_data()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        application = Application.builder().token(TELEGRAM_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        application.run_polling()
        
    except Exception as e:
        logger.error(f"Error in main: {str(e)}")
        logger.error(f"Traceback: {traceback.format_exc()}")
        raise

if __name__ == '__main__':
    main() 